 ----------------------------------------------------------------------CREATE------------------------------------------------------------------------------------- 

CREATE TABLE IF NOT EXISTS EntityType (
    Id SERIAL PRIMARY KEY,
    entity_type VARCHAR
);
CREATE TABLE IF NOT EXISTS Counselee (
    Id SERIAL PRIMARY KEY,
    survey_attempted BOOLEAN,
    subscription_type VARCHAR,
    start_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    end_Date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS Pastor (
    Id SERIAL PRIMARY KEY,
    pastor_description TEXT,
    duration int
);


CREATE TABLE IF NOT EXISTS User (
    id SERIAL PRIMARY KEY,
    user_name VARCHAR,
    user_email VARCHAR,
    created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    password VARCHAR,
    entity_type INT REFERENCES EntityType(id), 
    updated_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    is_deleted BOOLEAN,
    login_attempt INT,
    terms_and_conditions_accepted BOOLEAN
);

CREATE TABLE IF NOT EXISTS UserEntityAccess (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES User(id),
    entity_id INT,
    entity_type INT REFERENCES EntityType(Id),
    created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS Slot (
    Id SERIAL PRIMARY KEY,
    pastor_id INT REFERENCES Pastor(Id),
    slot_date DATE,
    start_time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    end_time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    is_available BOOLEAN,
    is_closed BOOLEAN
);
CREATE TABLE IF NOT EXISTS Rating (
    id SERIAL PRIMARY KEY,
    pastor_id INT REFERENCES Pastor(Id),
    rating INT,
    updated_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS Review (
    id SERIAL PRIMARY KEY,
    reviewed_by INT REFERENCES User(id),
    review_comment TEXT,
    pastor_id INT REFERENCES Pastor(Id),
    rating INT,
    created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS BookingStatus (
    Id SERIAL PRIMARY KEY,
    status VARCHAR
);
CREATE TABLE IF NOT EXISTS SessionStatus (
    id SERIAL PRIMARY KEY,
    status VARCHAR
);

CREATE TABLE IF NOT EXISTS Subscription (
    Id SERIAL PRIMARY KEY,
    subscription_plan VARCHAR,
    subscription_price DECIMAL,
    is_active BOOLEAN,
    start_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    end_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

CREATE TABLE IF NOT EXISTS UserImage (
    id SERIAL PRIMARY KEY,
    user_id INT REFERENCES User(id),
    name VARCHAR,
    image BYTEA,
    created_Date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS CounsellingType (
    Id SERIAL PRIMARY KEY,
    counselling_Type VARCHAR
);
CREATE TABLE IF NOT EXISTS Plan (
    id SERIAL PRIMARY KEY,
    plan_type VARCHAR,
    planDate TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    plan_name VARCHAR,
    plan_code VARCHAR,
    plan_price DECIMAL,
    is_active BOOLEAN,
    plan_period INT
);

CREATE TABLE EmailOtp (
 Id serial primary key,
 Email_id  varchar not null,
 OtpGeneratedTime DATETIME
);

CREATE TABLE IF NOT EXISTS BookingEvent (
    id SERIAL PRIMARY KEY,
    counselee_id INT REFERENCES Counselee(id),
    survey_attempted BOOLEAN,
    booking_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    Updated_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    pastor_id INT REFERENCES Pastor(Id),
    booking_status_id INT REFERENCES BookingStatus(Id),
    subscription_id INT REFERENCES Subscription(Id),
    is_payment_successful BOOLEAN,
    is_booked BOOLEAN,
    slot_Id INT REFERENCES Slot(Id)
);
CREATE TABLE IF NOT EXISTS BlockReportHistory (
    id SERIAL PRIMARY KEY,
    created_by INT REFERENCES User(id),
    counselee_id INT REFERENCES Counselee(id),
    pastor_id INT REFERENCES Pastor(Id),
    is_blocked BOOLEAN,
    is_reported BOOLEAN,
    block_reason VARCHAR,
    report_reason VARCHAR,
    start_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    end_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);
CREATE TABLE IF NOT EXISTS Audit_Log (
    Id SERIAL PRIMARY KEY,
    user_id INT REFERENCES User(id) ,
    event_type VARCHAR,
    event_name VARCHAR,
    event_description VARCHAR,
    created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_Date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    event_Id INT REFERENCES BookingEvent(id)
);
CREATE TABLE IF NOT EXISTS Session (
    id SERIAL PRIMARY KEY,
    event_id INT REFERENCES BookingEvent(id),
    start_time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    end_time TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    plan_id INT REFERENCES Plan(id),
    is_payment_successful BOOLEAN,
    status_id INT REFERENCES SessionStatus(id)
);

CREATE TABLE IF NOT EXISTS Survey (
    id SERIAL PRIMARY KEY,
    question VARCHAR,
    options VARCHAR,
    is_active BOOLEAN,
    counseling_type INT REFERENCES CounsellingType(Id),
    display_order INT
);

CREATE TABLE IF NOT EXISTS SurveyResponse (
    Id SERIAL PRIMARY KEY,
    counselee_id INT REFERENCES Counselee(id),
    question_id INT REFERENCES Survey(id),
    response JSONB,  
    counseling_type INT REFERENCES CounsellingType(Id),
    created_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    updated_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);


CREATE TABLE IF NOT EXISTS PaymentDetail (
    Id SERIAL PRIMARY KEY,
    event_id INT REFERENCES BookingEvent(id),
    counselee_id INT REFERENCES Counselee(id),
    amount DECIMAL,
    transaction_date TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP,
    payment_method VARCHAR
);

CREATE TABLE IF NOT EXISTS FavouritePastor (
    id SERIAL PRIMARY KEY,
    counselee_id INT REFERENCES Counselee(id),
    pastor_id INT REFERENCES Pastor(Id),
    updated_date TIMESTAMPTZ DEFAULT CURRENT_TIMESTAMP
);


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
                                                                         INSERT 
INSERT INTO ENTITYTYPE VALUES (1, ‘PASTOR’)
INSERT INTO ENTITYTYPE VALUES (2, ‘COUNSELEE’)
